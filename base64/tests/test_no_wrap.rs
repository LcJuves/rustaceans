include!("../src/lib.rs");

#[allow(unused_imports)]
use std::fs::File;
#[allow(unused_imports)]
use std::io::Result;
#[allow(unused_imports)]
use std::io::Write;

#[test]
fn test_base64_encode_no_wrap() -> Result<()> {
    let bytes = include_bytes!("res/test.html");
    let ret_no_wrap = base64::encode(bytes, false, false, false);

    // let mut file = File::create("test_ret_no_wrap.txt")?;
    // file.write_all(&ret_no_wrap)?;
    // file.flush()?;

    assert_eq!(
        r#""#,
        String::from_utf8_lossy(&ret_no_wrap)
    );

    Ok(())
}

#[test]
fn test_base64_decode_no_wrap() -> Result<()> {
    let str_bytes = include_bytes!("res/test_ret_no_wrap.txt");
    let string = String::from_utf8_lossy(str_bytes);

    let bytes = include_bytes!("res/test.html");

    let ret = base64::decode(&string, false);

    println!("{:?}", ret);

    assert_eq!(ret, bytes);

    Ok(())
}
